const fs = require('fs');
const path = require('path');

const ENV_FILES = {
  dev: '.env.dev',
  prod: '.env.production',
  target: '.env'
};

function switchEnvironment(env) {
  const sourceFile = ENV_FILES[env];
  const targetFile = ENV_FILES.target;
  
  if (!sourceFile) {
    console.error('‚ùå Ambiente inv√°lido. Use: dev ou prod');
    process.exit(1);
  }
  
  try {
    // Verifica se o arquivo fonte existe
    if (!fs.existsSync(sourceFile)) {
      console.error(`‚ùå Arquivo ${sourceFile} n√£o encontrado`);
      process.exit(1);
    }
    
    // Copia o arquivo
    fs.copyFileSync(sourceFile, targetFile);
    
    // L√™ o conte√∫do para mostrar as configura√ß√µes
    const content = fs.readFileSync(targetFile, 'utf8');
    const apiUrl = content.match(/API_BASE_URL=(.+)/)?.[1] || 'N√£o encontrada';
    
    if (env === 'dev') {
      console.log('‚úÖ Ambiente alterado para DESENVOLVIMENTO');
      console.log('üìç API:', apiUrl);
      console.log('üîß Debug: Habilitado');
    } else {
      console.log('‚úÖ Ambiente alterado para PRODU√á√ÉO');  
      console.log('üìç API:', apiUrl);
      console.log('üîß Debug: Desabilitado');
    }
    
    console.log('\nüîÑ Reinicie o Metro bundler para aplicar as mudan√ßas:');
    console.log('npm start -- --reset-cache');
    
  } catch (error) {
    console.error('‚ùå Erro ao trocar ambiente:', error.message);
    process.exit(1);
  }
}

// Pega o argumento da linha de comando
const env = process.argv[2];

if (!env) {
  console.log('üîß Uso: node scripts/switch-env.js [dev|prod]');
  console.log('\nExemplos:');
  console.log('  node scripts/switch-env.js dev   # Para desenvolvimento');  
  console.log('  node scripts/switch-env.js prod  # Para produ√ß√£o');
  process.exit(1);
}

switchEnvironment(env);